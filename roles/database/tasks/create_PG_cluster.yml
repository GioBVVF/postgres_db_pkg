  - name: install packages
    yum:
        name: '{{ item.name }}'
        state: present
        validate_certs: no
    #when: item.required == True
    when:
      - item.required == True
      - ansible_distribution|string == 'CentOS'
    loop: "{{ packages }}"
  -
    name: 'systemctl enable postgresql-{{postgres_version}}'
    command: systemctl enable postgresql-{{postgres_version}}
  -
    name: 'Execute a cmd initdb'
    command: /usr/pgsql-{{postgres_version}}/bin/postgresql-{{postgres_version}}-setup initdb
    become: yes
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  -
    name: 'Ensure the postgresql service is running'
    service:
      name: postgresql-{{postgres_version}}
      state: started
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  -
    name: 'createuser {{ repplication_user }}'
    command: createuser --superuser {{ repplication_user }}
    become: yes
    become_user: postgres
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  -
    name: 'createdb {{ replication_db }}'
    command: createdb --owner={{ repplication_user }} {{ replication_db }}
    become: yes
    become_user: postgres
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  -
    name: 'ALTER USER {{ repplication_user }}'
    command: psql -c "ALTER USER  {{ repplication_user }} SET search_path TO {{ replication_db }}, public;"
    become: yes
    become_user: postgres
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  -
    name: listen_addresses
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}postgresql.conf'
      #regexp: '^#listen_addresses='
      insertafter: '^#listen_addresses'
      line: listen_addresses = '*'
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  - name: max_wal_senders = 10
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}postgresql.conf'
      #regexp: '^max_wal_senders='
      insertafter: '^#max_wal_senders'
      line: max_wal_senders = 10
    when: inventory_hostname in groups['pg_masters']
  -
    name: max_replication_slots = 10
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}postgresql.conf'
      #regexp: '^#max_replication_slots='
      insertafter: '^#max_replication_slots'
      line: max_replication_slots = 10
    when: inventory_hostname in groups['pg_masters']
  -
    name: wal_level = '{{wal_level_value}}'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}postgresql.conf'
      #regexp: '^wal_level'
      insertafter: '^#wal_level'
      line:  wal_level = {{wal_level_value}}
    when: inventory_hostname in groups['pg_masters']
  -
    name: hot_standby = on
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}postgresql.conf'
      #regexp: '^hot_standby'
      insertafter: '^#hot_standby'
      line:  hot_standby = on
    when: inventory_hostname in groups['pg_masters']
  -
    name: archive_mode = on
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}postgresql.conf'
      #regexp: '^archive_mode'
      insertafter: '^#archive_mode'
      line:  archive_mode = on
    when: inventory_hostname in groups['pg_masters']
  -
    name: archive_command = '/bin/true'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}postgresql.conf'
      #regexp: '^archive_command'
      insertafter: '^#archive_command'
      line:  archive_command = '/bin/true'
    when: inventory_hostname in groups['pg_masters']
  -
    name: shared_preload_libraries = 'repmgr'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}postgresql.conf'
      #regexp: '^shared_preload_libraries'
      insertafter: '^#shared_preload_libraries'
      line: 'shared_preload_libraries = ''repmgr'''
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  -
    name:  add {{repplication_user}} for local connections only
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}pg_hba.conf'
      #regexp: '^# "local" is for Unix domain socket connections only'
      insertafter: '^# "local" is for Unix domain socket connections only'
      line: 'local   {{replication_db}}          {{repplication_user}}                              trust'
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  - name:  'add {{repplication_user}} for host connections only on db {{replication_db}}'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}pg_hba.conf'
      #regexp: '^# "local" is for Unix domain socket connections only'
      insertafter: '^# IPv4 local connections:'
      line: 'host    {{replication_db}}          {{repplication_user}}      {{network_segment}}/16            trust'
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  - name:  'add {{repplication_user}} for localhost connections only on db {{replication_db}}'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}pg_hba.conf'
      #regexp: '^# "local" is for Unix domain socket connections only'
      insertafter: '^# IPv4 local connections:'
      line: 'host    {{replication_db}}          {{repplication_user}}      127.0.0.1/32            trust'
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  - name:  'add dba for connections only on cluster'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}pg_hba.conf'
      #regexp: '^# "local" is for Unix domain socket connections only'
      insertafter: '^# IPv4 local connections:'
      line: 'host    all         postgres      {{network_segment}}/16            md5'
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  - name:  'add {{repplication_user}} for local for replication'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}pg_hba.conf'
      #regexp: '^# "local" is for Unix domain socket connections only'
      insertafter: '^# replication privilege'
      line: 'host   replication     {{repplication_user}}    127.0.0.1/32                trust'
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  - name:  'add {{repplication_user}} for HOST for replication'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}pg_hba.conf'
      #regexp: '^# "local" is for Unix domain socket connections only'
      insertafter: '^# replication privilege'
      line: 'host   replication     {{repplication_user}}    {{network_segment}}/16             trust'
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  - name:  'add {{repplication_user}} for replication'
    ansible.builtin.lineinfile:
      path: '{{data_dir_postgres}}pg_hba.conf'
      #regexp: '^# "local" is for Unix domain socket connections only'
      insertafter: '^# replication privilege'
      line: 'local   replication     {{repplication_user}}                              trust'
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
  -
    name: 'restart postgresql to verify and reload all configuration'
    service:
      name: 'postgresql-{{postgres_version}}'
      state: restarted
    when: ((inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_witness_grp']))
# -
#   name: 'Create Postgres Cluster 12 with repmgr - all ops'
#   hosts: all
#   become: yes
#   become_method: sudo
#   gather_facts: yes
#   vars:
#   vars_files:
#     - ./variables/cluster_params.yaml
#   tasks:
  -
     name: 'Set node_id in /etc/repmgr/{{postgres_version}}/repmgr.conf'
     ansible.builtin.lineinfile:
       path: /etc/repmgr/{{postgres_version}}/repmgr.conf
       regexp: '^node_id='
       line: 'node_id={{item.node_id}}'
     when: inventory_hostname == item.host_name
     loop: "{{ nodes }}"
  -
    name: 'set node_name in /etc/repmgr/{{postgres_version}}/repmgr.conf'
    ansible.builtin.lineinfile:
      path: /etc/repmgr/{{postgres_version}}/repmgr.conf
      regexp: '^node_name='
      line: 'node_name=''{{item.name}}'''
    when: inventory_hostname == item.host_name
    loop: "{{ nodes }}"
  -
    name: 'conninfo in /etc/repmgr/{{postgres_version}}/repmgr.conf'
    ansible.builtin.lineinfile:
        path: /etc/repmgr/{{postgres_version}}/repmgr.conf
        regexp: '^conninfo='
        line:  '{{item.conninfo}}'
    when: inventory_hostname == item.host_name
    loop: "{{ nodes }}"
  -
    name: data_directory='{{data_dir_postgres}}' in /etc/repmgr/{{postgres_version}}/repmgr.conf
    ansible.builtin.lineinfile:
        path: /etc/repmgr/{{postgres_version}}/repmgr.conf
        regexp: '^data_directory='
        line:  '{{ item.data_directory}}'
    when: inventory_hostname == item.host_name
    loop: "{{ nodes }}"
  -
    name: use_replication_slots in /etc/repmgr/{{postgres_version}}/repmgr.conf
    ansible.builtin.lineinfile:
        path: /etc/repmgr/{{postgres_version}}/repmgr.conf
        #regexp: '^#use_replication_slots='
        insertafter: '^#use_replication_slots='
        line:  '{{ item.replication_slots }}'
    when: ((inventory_hostname == item.host_name) or (inventory_hostname in groups['pg_masters']) or (inventory_hostname in groups['pg_slaves']))
    loop: "{{ nodes }}"
  -
    name: 'firewall open port 5432'
    command: firewall-cmd --zone=public --add-port=5432/tcp --permanent
  -
    name: 'firewall open port 5432 firewall-cmd reload'
    command: firewall-cmd --reload
  -
    name: Creates tablespaces directory on all node
    file:
      path: "{{ mount_point_tbs }}"
      state: directory
      recurse: yes
      owner: postgres
      group: postgres
    #when: inventory_hostname not in groups['pg_witness']
  -
      name: 'primary register'
      command: /usr/pgsql-{{postgres_version}}/bin/repmgr -f /etc/repmgr/{{postgres_version}}/repmgr.conf primary register
      become: yes
      become_user: postgres
      when: inventory_hostname in groups['pg_masters']
  -
      name: 'witness register'
      command: /usr/pgsql-{{postgres_version}}/bin/repmgr -f /etc/repmgr/{{postgres_version}}/repmgr.conf witness register -h {{primary_host}}
      become: yes
      become_user: postgres
      when: inventory_hostname in groups['pg_witness_grp']
# -
#   name: 'Create Postgres Cluster 12 with repmgr - slaves ops'
#   hosts: pg_slaves
#   become: yes
#   become_method: sudo
#   gather_facts: yes
#   vars:
#   vars_files:
#     - ./variables/cluster_params.yaml
#   tasks:
  -
      name: 'replica clone'
      command: '/usr/pgsql-{{postgres_version}}/bin/repmgr -h {{primary_host}} -U repmgr -d repmgr -f /etc/repmgr/{{postgres_version}}/repmgr.conf standby clone -F'
      become: yes
      become_user: postgres
      when: inventory_hostname in groups['pg_slaves']
  -
    name: 'restart postgresql to verify and reload all configuration on slaves nodes'
    service:
      name: postgresql-{{postgres_version}}
      state: restarted
    when: inventory_hostname in groups['pg_slaves']
  -
    name: 'replica register'
    command: /usr/pgsql-{{postgres_version}}/bin/repmgr -f /etc/repmgr/{{postgres_version}}/repmgr.conf standby register
    become: yes
    become_user: postgres
    when: inventory_hostname in groups['pg_slaves']
