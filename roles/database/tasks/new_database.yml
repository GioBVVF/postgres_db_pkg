  -
    name: Make sure psycopg2 is installed
    pip:
     name: psycopg2
     state: present
  -
   name: Add postgres users to pg_hba.conf in local session trust
   postgresql_pg_hba:
     dest: '{{data_dir_postgres}}pg_hba.conf'
     contype: local
     users: postgres
     databases: all
     method: trust
   when: inventory_hostname in groups['pg_masters']
  -
    name: 'Create a new database with name {{new_database}}'
    postgresql_db: name={{new_database}}
    become: yes
    become_user: postgres
    when: inventory_hostname in groups['pg_masters']
  -
   name: Creates tablespaces directory
   file:
     path: "{{ item.path }}"
     state: directory
     recurse: yes
     owner: postgres
     group: postgres
   #when: item.required == True
   loop: "{{ tablespaces }}"
  -
   name: Create a new tablespaces
   postgresql_tablespace:
     name: '{{item.name}}'
     owner: postgres
     location: "{{ item.path }}"
     state: present
   when: inventory_hostname in groups['pg_masters']
   loop: "{{ tablespaces }}"
  -
   name: 'ALTER DATABASE {{new_database}} default_tablespace {{default_tablespace}}'
   command: psql -c "ALTER DATABASE {{new_database}}  SET default_tablespace='{{default_tablespace}}' ";
   become: yes
   become_user: postgres
   when: inventory_hostname in groups['pg_masters']
  -
   name: Add users {{new_database}}_owner and {{new_database}}_web access to databases {{new_database}} from ipv4 subnet_from_client using md5 authentication.
   postgresql_pg_hba:
     dest: '{{data_dir_postgres}}pg_hba.conf'
     contype: host
     users: '{{new_database}}_owner,{{new_database}}_web'
     source: '{{ item.subnet }}'
     databases: '{{new_database}}'
     method: md5
   when: item.required == True
   loop: "{{ subnet_from_client }}"
  -
    name: REVOKE CREATE ON SCHEMA public FROM PUBLIC
    postgresql_privs:
     db: '{{new_database}}'
     state: absent
     privs: CREATE
     objs: ALL_IN_SCHEMA
     role: PUBLIC
    when: inventory_hostname in groups['pg_masters']
  -
   name: 'Connect to {{new_database}} database, create {{new_database}}_owner User'
   postgresql_user: #db={{new_database}} name={{new_database}}_owner password={{ pg_password }}
    db: '{{new_database}}'
    name: '{{new_database}}_owner'
    password: '{{pwd_owner}}'
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'grant usage on schema public to {{new_database}}_owner'
   postgresql_privs:
    db: '{{new_database}}'
    schema: public
    objs: ALL_IN_SCHEMA
    privs: USAGE
    role: '{{new_database}}_owner'
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'GRANT ALL PRIVILEGES ON SCHEMA public to {{new_database}}_owner;'
   postgresql_privs:
    db: '{{new_database}}'
    privs: ALL
    type: schema
    objs: public
    role: '{{new_database}}_owner'
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'GRANT all privileges on all tables IN SCHEMA public TO  {{new_database}}_owner'
   postgresql_privs:
    db: '{{new_database}}'
    schema: public
    privs: ALL
    type: table
    objs: ALL_IN_SCHEMA
    role: '{{new_database}}_owner'
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'grant create on database myNewDB to {{new_database}}_owner'
   postgresql_privs:
    db: '{{new_database}}'
    privs: CREATE
    type: database
    role: '{{new_database}}_owner'
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'Connect to {{new_database}} database, create {{new_database}}_web User'
   postgresql_user: #db={{new_database}} name={{new_database}}_owner password={{ pg_password }}
    db: '{{new_database}}'
    name: '{{new_database}}_web'
    password: '{{pwd_web}}'
    priv: ALL
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'grant usage on schema public to {{new_database}}_web'
   postgresql_privs:
    db: '{{new_database}}'
    schema: public
    objs: ALL_IN_SCHEMA
    privs: USAGE
    role: '{{new_database}}_web'
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'GRANT SELECT, update, delete, insert ON ALL TABLES IN SCHEMA public TO {{new_database}}_web'
   postgresql_privs:
    db: '{{new_database}}'
    schema: public
    objs: ALL_IN_SCHEMA
    privs: SELECT,UPDATE,DELETE,INSERT
    role: '{{new_database}}_web'
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public to  {{new_database}}_web'
   postgresql_privs:
    db: '{{new_database}}'
    schema: public
    type: sequence
    objs: ALL_IN_SCHEMA
    privs: USAGE,SELECT
    role: '{{new_database}}_web'
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'ALTER DEFAULT PRIVILEGES in schema public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO {{new_database}}_web'
   postgresql_privs:
    db: '{{new_database}}'
    schema: public
    objs: TABLES
    privs: SELECT,UPDATE,DELETE,INSERT
    type: default_privs
    role: '{{new_database}}_web'
    grant_option: no
   when: inventory_hostname in groups['pg_masters']
  -
   name: 'ALTER DEFAULT PRIVILEGES in schema public GRANT USAGE, SELECT ON SEQUENCES to {{new_database}}_web'
   postgresql_privs:
    db: '{{new_database}}'
    schema: public
    objs: SEQUENCES
    privs: USAGE,SELECT
    type: default_privs
    role: '{{new_database}}_web'
    grant_option: no
   when: inventory_hostname in groups['pg_masters']
